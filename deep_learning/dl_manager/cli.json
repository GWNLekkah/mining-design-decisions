{
  "name": "__main__.py",
  "help": "A Deep Learning CLI utility.",
  "commands": [
    {
      "name": "gui",
      "help": "Start an auxiliary analysis GUI.",
      "args": []
    },
    {
      "name": "list",
      "help": "List options for various CLI options",
      "args": [
        {
          "name": "arg",
          "style": "positional",
          "help": "Possible categories to list options for.",
          "nargs": "1",
          "type": "enum",
          "options": [
            "classifiers",
            "inputs",
            "outputs"
          ]
        }
      ]
    },
    {
      "name": "hyperparams",
      "help": "View hyper-parameters for a classifier",
      "args": [
        {
          "name": "classifier",
          "help": "Classifier to view. Use `list` for options.",
          "style": "positional",
          "nargs": "1",
          "type": "str"
        }
      ]
    },
    {
      "name": "generator-params",
      "help": "View parameters for a feature generator",
      "args": [
        {
          "name": "generator",
          "help": "Generator to view. Use `list` for options.",
          "style": "positional",
          "nargs": "1",
          "type": "str"
        }
      ]
    },
    {
      "name": "run",
      "help": "Train a classifier and store the results",
      "args": [
        {
          "name": "input-mode",
          "alias": "i",
          "help": "Generator to use. Use `list` for options.",
          "style": "named",
          "nargs": "+",
          "type": "str",
          "required": true
        },
        {
          "name": "output-mode",
          "alias": "o",
          "help": "Output mode to use. Use `list` for options.",
          "style": "named",
          "nargs": "1",
          "type": "str",
          "required": true
        },
        {
          "name": "params",
          "alias": "p",
          "help": "Generator params. Items in the name=value format.",
          "nargs": "+",
          "type": "dict",
          "style": "named"
        },
        {
          "name": "ontology-classes",
          "help": "Path to a file containing ontology classes.",
          "nargs": "1",
          "type": "str",
          "default": "",
          "style": "named"
        },
        {
          "name": "apply-ontology-classes",
          "help": "Enable application of ontology classes",
          "style": "flag"
        },
        {
          "name": "classifier",
          "help": "Classifier to use. Use `list` for options",
          "style": "positional",
          "nargs": "+",
          "type": "str"
        },
        {
          "name": "epochs",
          "alias": "e",
          "help": "Amount of training epochs",
          "style": "named",
          "nargs": "1",
          "type": "int",
          "required": true
        },
        {
          "name": "split-size",
          "alias": "s",
          "help": "Size of testing and validation splits.",
          "type": "float",
          "default": "0.2",
          "style": "named",
          "nargs": "1"
        },
        {
          "name": "max-train",
          "help": "Maximum amount of training items. -1 for infinite",
          "style": "named",
          "nargs": "1",
          "type": "int",
          "default": "-1"
        },
        {
          "name": "k-cross",
          "alias": "k",
          "help": "Enable k-fold cross-validation.",
          "style": "named",
          "type": "int",
          "default": "0",
          "nargs": "1"
        },
        {
          "name": "quick-cross",
          "alias": "qc",
          "help": "Enable k-fold cross validation",
          "style": "flag"
        },
        {
          "name": "cross-project",
          "help": "Run cross project validation.",
          "style": "flag"
        },
        {
          "name": "cache-features",
          "help": "Force caching of features. NOTE: the pipeline does not handle cache invalidation!",
          "style": "flag"
        },
        {
          "name": "architectural-only",
          "alias": "ao",
          "help": "If specified, only architectural issues are used",
          "style": "flag"
        },
        {
          "name": "hyper-params",
          "alias": "hp",
          "help": "Hyper-parameters params. Items in the name=value format.",
          "nargs": "+",
          "type": "dict",
          "style": "named"
        },
        {
          "name": "class-balancer",
          "help": "Enable Class-Balancing",
          "style": "named",
          "nargs": "1",
          "type": "str",
          "default": "None"
        },
        {
          "name": "batch-size",
          "help": "Specify the batch size used during training",
          "type": "int",
          "default": "32",
          "style": "named"
        },
        {
          "name": "peregrine",
          "help": "Specify to enable running on peregrine",
          "style": "flag"
        },
        {
          "name": "combination-strategy",
          "alias": "cs",
          "help": "Strategy used to combine models. Use `combination-strategies` for more information.",
          "nargs": "1",
          "style": "named",
          "default": "concat",
          "type": "enum",
          "options": [
            "add",
            "subtract",
            "min",
            "max",
            "multiply",
            "dot",
            "concat"
          ]
        },
        {
          "name": "ensemble-strategy",
          "alias": "es",
          "help": "Strategy used to combine models. Use `combination-strategies` for more information.",
          "nargs": "1",
          "style": "named",
          "default": "none",
          "type": "enum",
          "options": [
            "stacking",
            "boosting",
            "voting"
          ]
        },
        {
          "name": "stacking-meta-classifier",
          "help": "Classifier to use as meta-classifier in stacking.",
          "nargs": "1",
          "type": "str",
          "style": "named"
        },
        {
          "name": "stacking-meta-classifier-hyper-parameters",
          "help": "Hyper-parameters for the meta-classifier",
          "type": "dict",
          "nargs": "+",
          "style": "named"
        },
        {
          "name": "stacking-use-concat",
          "help": "Use simple concatenation to create the input for the meta classifier",
          "style": "flag",
          "nargs": "1"
        },
        {
          "name": "stacking-no-matrix",
          "help": "Disallow the use of matrices for meta classifier input",
          "style": "flag",
          "nargs": "1"
        },
        {
          "name": "boosting-rounds",
          "help": "Amount of rounds in the boosting process",
          "style": "named",
          "nargs": "1",
          "default": "10",
          "type": "int"
        },
        {
          "name": "use-early-stopping",
          "help": "If specified, use early stopping.",
          "nargs": "1",
          "style": "flag"
        },
        {
          "name": "early-stopping-patience",
          "help": "Patience used when using early stopping",
          "nargs": "1",
          "style": "named",
          "type": "int",
          "default": "5"
        },
        {
          "name": "early-stopping-min-delta",
          "help": "Minimum delta used when using early stopping. One entry for every attribute used.",
          "nargs": "+",
          "style": "named",
          "type": "float",
          "default": "0.001"
        },
        {
          "name": "early-stopping-attribute",
          "help": "Attribute(s) to use for early stopping (from the validation set)",
          "nargs": "+",
          "style": "named",
          "type": "str",
          "default": "loss"
        },
        {
          "name": "test-separately",
          "help": "If given, disable combining multiple classifiers. In stead, test them separately on the same data.",
          "style": "flag"
        },
        {
          "name": "store-model",
          "alias": "sm",
          "help": "If given, store the trained model. Can only be used when training a single model.",
          "style": "flag"
        },
        {
          "name": "model-id",
          "help": "ID of the model being trained. Must be present in the database. (only required for storage)",
          "style": "named",
          "type": "str",
          "default": ""
        },
        {
          "name": "analyze-keywords",
          "help": "Compute a list of important keywords (convolutional mode only)",
          "style": "flag"
        },
        {
          "name": "training-data-query",
          "help": "Query to obtain data from the database for training",
          "type": "str",
          "required": true,
           "style": "named"
        },
        {
          "name": "test-data-query",
          "help": "Query to obtain data from the database for performance evaluation",
          "type": "str",
          "style": "named"
        },
        {
          "name": "database-url",
          "alias": "db",
          "help": "URL of the database (wrapper)",
          "type": "str",
          "required": true,
          "style": "named"
        },
        {
          "name": "test-with-training-data",
          "help": "Draw testing data from training data using train/test split",
          "style": "flag",
          "default": false
        },
        {
          "name": "num-threads",
          "help": "Number of threads to use for preprocessing",
          "style": "named",
          "required": true,
          "type": "int",
          "nargs": "1"
        }
     ]
    },
    {
      "name": "train",
      "help": "Variant of the `run` command which loads a config from the database.",
      "args": [
        {
          "name": "database-url",
          "alias": "db",
          "help": "URL of the database (wrapper)",
          "type": "str",
          "required": true,
          "style": "named"
        },
        {
          "name": "model-id",
          "help": "ID of the model being trained. Must be present in the database. (only required for storage)",
          "style": "named",
          "type": "str",
          "default": "",
          "required": true
        },
        {
          "name": "num-threads",
          "help": "Number of threads to use for preprocessing",
          "style": "named",
          "required": true,
          "type": "int",
          "nargs": "1"
        }
      ]
    },
    {
      "name": "predict",
      "help": "Use an existing classifier to make predictions on new data.",
      "args": [
        {
          "name": "model",
          "alias": "m",
          "required": true,
          "style": "named",
          "type": "str"
        },
        {
          "name": "version",
          "alias": "v",
          "required": true,
          "style": "named",
          "type": "str",
          "default": "most-recent"
        },
        {
          "name": "data-query",
          "alias": "d",
          "required": true,
          "style": "named",
          "type": "str"
        },
        {
          "name": "database-url",
          "alias": "db",
          "help": "URL of the database (wrapper)",
          "type": "str",
          "required": true,
          "style": "named"
        },
        {
          "name": "num-threads",
          "help": "Number of threads to use for preprocessing",
          "style": "named",
          "required": true,
          "type": "int",
          "nargs": "1"
        }
      ]
    },
    {
      "name": "generate-embedding",
      "description": "Generate a word or document embedding for use in a feature generator",
      "args": [
        {
          "name": "embedding-id",
          "alias": "id",
          "help": "Embedding to train",
          "required": true,
          "style": "named",
          "type": "str"
        },
        {
          "name": "database-url",
          "alias": "db",
          "help": "URL of the database (wrapper)",
          "type": "str",
          "required": true,
          "style": "named"
        },
        {
          "name": "num-threads",
          "help": "Number of threads to use for preprocessing",
          "style": "named",
          "required": true,
          "type": "int",
          "nargs": "1"
        }
      ]
    },
    {
      "name": "embedding-parameters",
      "help": "Show available parameters for an embedding generator",
      "args": [
        {
          "name": "generator",
          "help": "Generator to use",
          "style": "positional",
          "nargs": "1",
          "type": "enum",
          "options": [
            "Word2VecGenerator", "Doc2VecGenerator"
          ]
        }
      ]
    },
    {
      "name": "embedding-generators",
      "help": "Show available embedding generators"
    },
    {
      "name": "combination-strategies",
      "help": "Give a comprehensive overview of all available model combination strategies."
    },
    {
      "name": "serve",
      "help": "Run the pipeline as a web api",
      "args": [
        {
          "name": "port",
          "alias": "p",
          "type": "int",
          "default": "9011",
          "nargs": "1",
          "style": "named",
          "help": "Port to bind to"
        },
        {
          "name": "keyfile",
          "help": "SLL Keyfile",
          "type": "class",
          "options": [
            "pathlib.Path"
          ],
          "style": "named",
          "required": true
        },
        {
          "name": "certfile",
          "help": "SSL cerfile",
          "type": "class",
          "options": [
            "pathlib.Path"
          ],
          "style": "named",
          "required": true
        }
      ]
    },
    {
      "name": "metrics",
      "help": "Endpoint to calculate various metrics based on predictions",
      "args": [
        {
          "name": "database-url",
          "alias": "db",
          "help": "URL of the database (wrapper)",
          "type": "str",
          "required": true,
          "style": "named"
        },
        {
          "name": "model-id",
          "alias": "m",
          "help": "ID of the model from which predictions must be fetched",
          "type": "str",
          "required": true,
          "style": "named"
        },
        {
          "name": "version-id",
          "alias": "v",
          "help": "ID of the model version from which predictions must be fetched",
          "type": "str",
          "required": true,
          "style": "named"
        },
        {
          "name": "metrics",
          "help": "JSON string describing which metrics should be calculated",
          "type": "str",
          "required": true,
          "style": "named"
        },
        {
          "name": "classification-as-detection",
          "help": "Evaluate detection performance of a classification model",
          "style": "flag"
        },
        {
          "name": "epoch",
          "help": "Epoch to evaluate metrics at. Either an epoch, `last`, `stopping-point`, or `all`",
          "type": "str",
          "style": "named",
          "required": true
        },
        {
          "name": "include-non-arch",
          "help": "Include the non-architectural class as a class in Classification3",
          "style": "flag"
        }
      ]
    }
  ]
}