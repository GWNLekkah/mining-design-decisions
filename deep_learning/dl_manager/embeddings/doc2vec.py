import pathlib

from gensim.models.doc2vec import Doc2Vec as GensimDoc2Vec
from gensim.models.doc2vec import TaggedDocument

from ..config import Argument, IntArgument
from .embedding_generator import AbstractEmbeddingGenerator


class Doc2VecGenerator(AbstractEmbeddingGenerator):

    def generate_embedding(self, issues: list[str], path: pathlib.Path):
        documents = []
        for idx, doc in enumerate(issues):
            documents.append(TaggedDocument(doc, [idx]))
        min_count = self.params['min-count']
        vector_size = self.params['vector-size']
        doc2vec_model = GensimDoc2Vec(documents, min_count=min_count, vector_size=vector_size)
        doc2vec_model.save(path)

    @staticmethod
    def get_arguments() -> dict[str, Argument]:
        return super(Doc2VecGenerator, Doc2VecGenerator).get_arguments() | {
            'vector-size': IntArgument(
                name='vector-size',
                description='Size of the vectors generated by Word2Vec',
                minimum=2,
                maximum=10000
            ),
            'min-count': IntArgument(
                name='min-count',
                description='Minimum amount of occurrences for a word to be included in the analysis',
                minimum=0,
                maximum=10000
            )
        }
